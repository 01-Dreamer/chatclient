import { app, shell, BrowserWindow, ipcMain } from 'electron'import { join } from 'path'import { electronApp, optimizer, is } from '@electron-toolkit/utils'import icon from '../../resources/icon.png?asset'const loginViewWidth = 300let loginViewHeight = 320const registerViewWidth = 300const registerViewHeight = 380function createWindow() {  const mainWindow = new BrowserWindow({    width: loginViewWidth,    height: loginViewHeight,    show: false,    autoHideMenuBar: true,    titleBarStyle: "hidden",    resizable: false,    frame: true,    transparent: true,    icon: icon,    webPreferences: {      preload: join(__dirname, '../preload/index.js'),      sandbox: false    }  })  mainWindow.on('ready-to-show', () => {    mainWindow.show()  })  mainWindow.webContents.setWindowOpenHandler((details) => {    shell.openExternal(details.url)    return { action: 'deny' }  })  if (is.dev && process.env['ELECTRON_RENDERER_URL']) {    mainWindow.loadURL(process.env['ELECTRON_RENDERER_URL'])  } else {    mainWindow.loadFile(join(__dirname, '../renderer/index.html'))  }}app.whenReady().then(() => {  electronApp.setAppUserModelId('com.electron')  app.on('browser-window-created', (_, window) => {    optimizer.watchWindowShortcuts(window)  })  createWindow()  //////////////////////////////////////  // ipc注册  //////////////////////////////////////  // 关闭主进程  ipcMain.on('exitApp', () => {      app.quit()  })  // 更改窗口大小  ipcMain.on('changeWindow', (e, window) => {    const win = BrowserWindow.getFocusedWindow();    if(!win) {      console.log('failed to get win');      return    }    win.setResizable(true);    if(window === 'login') {      win.setSize(loginViewWidth, loginViewHeight)    } else if(window === 'register') {      win.setSize(registerViewWidth, registerViewHeight)    } else if(window === 'main') {      win.setSize(999, 999) // TODO    } else {      console.log('changeWindow error')    }    win.setResizable(false);  })  app.on('activate', function () {    if (BrowserWindow.getAllWindows().length === 0) createWindow()  })})app.on('window-all-closed', () => {  if (process.platform !== 'darwin') {    app.quit()  }})